include {show_header; prep_params_genome} from '../modules/utils.nf'

def help() {
  log.info show_header()

  log.info"""

    Usage:

    The typical command for running the pipeline is as follows:

      nextflow run nfc/chipseq -profile msi_mesabi

    Mandatory arguments:
      --design [file]                 tab-separated file containing information about the samples in the experiment (see docs/usage.md)
      --fasta [file]                  Path to Fasta reference. Not mandatory when using reference in iGenomes config via --genome
      --gtf [file]                    Path to GTF file. Not mandatory when using reference in iGenomes config via --genome
      -profile [str]                  Configuration profile to use. Can use multiple (comma separated)
                                      Available: conda, docker, singularity, awsbatch, test

    Generic
      --seq_center [str]              Sequencing center information to be added to read group of BAM files
      --fragment_size [int]           Estimated fragment size used to extend single-end reads (Default: 200)
      --fingerprint_bins [int]        Number of genomic bins to use when calculating fingerprint plot (Default: 500000)

    References                        If not specified in the configuration file or you wish to overwrite any of the references
      --genome [str]                  Name of genome reference
      --bwa_index [file]              Full path to directory containing BWA index including base name i.e. /path/to/index/genome.fa
      --gene_bed [file]               Path to BED file containing gene intervals
      --tss_bed [file]                Path to BED file containing transcription start sites
      --macs_gsize [str]              Effective genome size parameter required by MACS2. If using iGenomes config, values have only been provided when --genome is set as GRCh37, GRCm38, hg19, mm10, BDGP6 and WBcel235
      --blacklist [file]              Path to blacklist regions (.BED format), used for filtering alignments
      --save_reference [bool]         If generated by the pipeline save the BWA index in the results directory

    Trimming
      --clip_r1 [int]                 Instructs Trim Galore to remove bp from the 5' end of read 1 (or single-end reads) (Default: 0)
      --clip_r2 [int]                 Instructs Trim Galore to remove bp from the 5' end of read 2 (paired-end reads only) (Default: 0)
      --three_prime_clip_r1 [int]     Instructs Trim Galore to remove bp from the 3' end of read 1 AFTER adapter/quality trimming has been performed (Default: 0)
      --three_prime_clip_r2 [int]     Instructs Trim Galore to re move bp from the 3' end of read 2 AFTER adapter/quality trimming has been performed (Default: 0)
      --trim_nextseq [int]            Instructs Trim Galore to apply the --nextseq=X option, to trim based on quality after removing poly-G tails (Default: 0)
      --skip_trimming [bool]          Skip the adapter trimming step
      --save_trimmed [bool]           Save the trimmed FastQ files in the results directory

    Alignments
      --keep_dups [bool]              Duplicate reads are not filtered from alignments
      --keep_multi_map [bool]         Reads mapping to multiple locations are not filtered from alignments
      --saveBAM [bool]                Save the intermediate BAM files from the alignment step - not done by default

    Peaks
      --narrow_peak [bool]            Run MACS2 in narrowPeak mode
      --broad_cutoff [float]          Specifies broad cutoff value for MACS2. Only used when --narrow_peak isnt specified (Default: 0.1)
      --min_reps_consensus [int]      Number of biological replicates required from a given condition for a peak to contribute to a consensus peak (Default: 1)
      --save_macs_pileup [bool]       Instruct MACS2 to create bedGraph files normalised to signal per million reads
      --skip_diff_analysis [bool]     Skip differential binding analysis

    QC
      --skip_fastqc [bool]            Skip FastQC
      --skip_picard_metrics [bool]    Skip Picard CollectMultipleMetrics
      --skip_preseq [bool]            Skip Preseq
      --skip_plot_profile [bool]      Skip deepTools plotProfile
      --skip_plot_fingerprint [bool]  Skip deepTools plotFingerprint
      --skip_spp [bool]               Skip Phantompeakqualtools
      --skip_igv [bool]               Skip IGV
      --skip_multiqc [bool]           Skip MultiQC

    Other
      --outdir [file]                 The output directory where the results will be saved
      --email [email]                 Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
      --email_on_fail [email]         Same as --email, except only send mail if the workflow is not successful
      --max_multiqc_email_size [str]  Theshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
      -name [str]                     Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

  """.stripIndent()
}

def prep_params(params, workflow) {
  if (!params.design) exit 1, "no design / meta file specified"
  if (!params.name) params.name = workflow.runName
  params.peak_type = params.narrow_peak ? "narrowPeak" : "broadPeak"
  prep_params_genome(params)
  // Trimming presets
    clip_r1 = params.clip_r1
    clip_r2 = params.clip_r2
    three_prime_clip_r1 = params.three_prime_clip_r1
    three_prime_clip_r2 = params.three_prime_clip_r2
}

def summary() {
  def summary = [:]
  if (workflow.revision) summary['Pipeline Release'] = workflow.revision
  summary['Run Name'] = params.name ?: workflow.runName
  summary['Design'] = params.design
  summary['Source'] = params.source
  if (params.seq_center) summary['Sequencing Center'] = params.seq_center
  summary['Trimming'] = "5'R1: $params.clip_r1 / 5'R2: $params.clip_r2 / 3'R1: $params.three_prime_clip_r1 / 3'R2: $params.three_prime_clip_r2 / NextSeq Trim: $params.trim_nextseq"
  if (params.genome) summary['Genome'] = params.genome
  //if (params.gtf) summary['GTF Annotation'] = params.gtf
  //if (params.gff) summary['GFF3 Annotation'] = params.gff
  //if (params.bed12) summary['BED Annotation'] = params.bed12
  if (params.tss_bed) summary['TSS BED'] = params.tss_bed
  if (params.macs_gsize) summary['MACS2 Genome Size'] = params.macs_gsize
  if (params.macs_gsize) summary['MACS2 Narrow Peaks'] = params.narrow_peak ? 'Yes' : 'No'
  summary['Min Consensus Reps'] = params.min_reps_consensus
  summary['Fingerprint Bins']       = params.fingerprint_bins
  //summary['Peak type']       = params.peak_type
  if (params.keep_dups)             summary['Keep Duplicates'] = 'Yes'
  if (params.keep_multi_map)        summary['Keep Multi-mapped'] = 'Yes'
  summary['Save Genome Index']      = params.save_reference ? 'Yes' : 'No'
  if (params.save_fastq)            summary['Save Fastq'] = 'Yes'
  if (params.save_trimmed)          summary['Save Trimmed'] = 'Yes'
  if (params.saveBAM)               summary['Save Intermeds BAMs'] =  'Yes'
  if (params.save_macs_pileup)      summary['Save MACS2 Pileup'] = 'Yes'
  if (params.skip_diff_analysis)    summary['Skip Diff Analysis'] = 'Yes'
  if (params.skip_fastqc)           summary['Skip FastQC'] = 'Yes'
  if (params.skip_picard_metrics)   summary['Skip Picard Metrics'] = 'Yes'
  if (params.skip_preseq)           summary['Skip Preseq'] = 'Yes'
  if (params.skip_meta_plot)        summary['Skip MetaPlot'] = 'Yes'
  if (params.skip_plot_fingerprint) summary['Skip plotFingerprint'] = 'Yes'
  if (params.skip_spp)              summary['Skip spp'] = 'Yes'
  if (params.skip_igv)              summary['Skip IGV'] = 'Yes'
  if (params.skip_multiqc)          summary['Skip MultiQC'] = 'Yes'
  summary['Max Resources'] = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
  if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
  summary['Output dir'] = params.outdir
  summary['Launch dir'] = workflow.launchDir
  summary['Working dir'] = workflow.workDir
  summary['Script dir'] = workflow.projectDir
  summary['User'] = workflow.userName
  if (workflow.profile == 'awsbatch') {
    summary['AWS Region']     = params.awsregion
    summary['AWS Queue']      = params.awsqueue
  }
  summary['Config Profile'] = workflow.profile
  if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
  if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
  if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
  if (params.email || params.email_on_fail) {
    summary['E-mail Address']    = params.email
    summary['E-mail on failure'] = params.email_on_fail
    summary['MultiQC maxsize']   = params.max_multiqc_email_size
  }
  return summary
}

def get_reads(design) {
  if (params.single_end) {
    ch_reads = design
        .splitCsv(header:true, sep:',')
        .map { row -> [ row.sample_id, false, [ file(row.fastq_1, checkIfExists: true) ] ] }
  } else {
    ch_reads = design
        .splitCsv(header:true, sep:',')
        .map { row -> [ row.sample_id, true, [ file(row.fastq_1, checkIfExists: true), file(row.fastq_2, checkIfExists: true) ] ] }
  }
  return ch_reads
}

def get_read_num(design) {
  ch_read_num = design
    .splitCsv(header:true, sep:"\t")
    .map { row -> [ row.sample_id, row.spots.toInteger() ] }
  return ch_read_num
}

def get_control(control) {
  ch_control = control
    .splitCsv(header:true, sep:"\t")
    .map { row -> [ row.sample_id, row.control_id, row.antibody, row.replicatesExist.toBoolean(), row.multipleGroups.toBoolean() ] }
  return ch_control
}

