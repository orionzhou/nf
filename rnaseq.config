params {
  // Input options
  input                      = 'input.csv'
  public_data_ids            = ''
  skip_sra_fastq_download    = false

  // References
  genome                     = 'Osativa'
  transcript_fasta           = ''
  additional_fasta           = ''
  splicesites                = ''
  gtf_extra_attributes       = 'gene_name'
  gtf_group_features         = 'gene_id'
  gtf_count_type             = 'exon'
  gtf_group_features_type    = 'gene_biotype'
  gencode                    = false
  save_reference             = false

  // UMI handling
  with_umi                   = false
  umitools_extract_method    = 'string'
  umitools_bc_pattern        = ''
  save_umi_intermeds         = false

  // Trimming
  clip_r1                    = 0
  clip_r2                    = 0
  three_prime_clip_r1        = 0
  three_prime_clip_r2        = 0
  trim_nextseq               = 0
  save_trimmed               = false
  skip_trimming              = false

  // Ribosomal RNA removal
  remove_ribo_rna            = false
  save_non_ribo_reads        = false
  ribo_database_manifest     = "${projectDir}/assets/rrna-db-defaults.txt"

  // Alignment
  aligner                    = 'star_salmon'
  pseudo_aligner             = ''
  seq_center                 = ''
  star_ignore_sjdbgtf        = false
  hisat_build_memory         = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
  stringtie_ignore_gtf       = false
  min_mapped_reads           = 5
  save_merged_fastq          = false
  save_unaligned             = false
  save_align_intermeds       = false
  skip_markduplicates        = false
  skip_alignment             = false

  // QC
  skip_qc                    = false
  skip_bigwig                = false
  skip_stringtie             = false
  skip_fastqc                = false
  skip_preseq                = true
  skip_dupradar              = false
  skip_qualimap              = false
  skip_rseqc                 = false
  skip_biotype_qc            = false
  skip_deseq2_qc             = false
  skip_multiqc               = false
  deseq2_vst                 = false
  rseqc_modules              = 'bam_stat,inner_distance,infer_experiment,junction_annotation,junction_saturation,read_distribution,read_duplication'

  // Boilerplate options
  enable_conda               = false
  clusterOptions             = ''
  outdir                     = './results'
  publish_dir_mode           = 'copy'
  multiqc_config             = ''
  multiqc_title              = ''
  email                      = ''
  email_on_fail              = 'pzhou@genetics.ac.cn'
  max_multiqc_email_size     = '25.MB'
  plaintext_email            = false
  monochrome_logs            = false
  help                       = false
  igenomes_base              = 's3://ngi-igenomes/igenomes/'
  tracedir                   = "${params.outdir}/pipeline_info"
  igenomes_ignore            = true
  singularity_pull_docker_container = false

  // Config options
  custom_config_version      = 'master'
  custom_config_base         = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames                  = [:]
  config_profile_description = ''
  config_profile_contact     = ''
  config_profile_url         = ''

  // Defaults only, expecting to be overwritten
  max_memory                 = '128.GB'
  max_cpus                   = 16
  max_time                   = '240.h'
}

includeConfig "$nf/configs/nextflow.config"
includeConfig "$nf/configs/rnaseq.config"

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
