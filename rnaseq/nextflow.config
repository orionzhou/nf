params {
  lib = 'rnaseq'
  source = 'sra'
  paired = 'SE'
  stranded = 'no'
  project = false
  // References
    genome = false
    save_reference = false
    gencode = false
    compressedReference = false
  // Trimming
    save_fastq = false
    skip_trimming = false
    clip_r1 = 0
    clip_r2 = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq = 0
    pico = false
    save_trimmed = false
  // Ribosomal RNA removal
    removeRiboRNA = false
    save_nonrRNA_reads = false
    rRNA_database_manifest = false
    rRNA_database_manifest = "$baseDir/assets/rrna-db-defaults.txt"
  // Alignment
    aligner = 'hisat2'
    saveBAM = false
    save_unmapped = false
    seq_center = false
    percent_aln_skip = 5
    markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 (in Sarek) for details
    hisat_build_memory = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
  // Optional utilities (salmon, stringTie)
    run_salmon = false
    run_stringtie = false
    stringtie_ignore_gtf = false
  // Read Counting
    fc_extra_attributes = 'gene_name'
    fc_group_features = 'gene_id'
    fc_count_type = 'exon'
    fc_group_features_type = 'gene_biotype'
    sampleLevel = false
    skip_biotype_qc = false
    mapQuality = 20
    preseq_min_reads = 100000
  // ASE
  ase = false
  // RIL
    ril = false
    min_ratio = 0.0001
    min_bin_size = 100000
  // CAGE
  cage = false
  // variant calling
  vntcall = false
  // QC
    skip_qc = false
    skip_fastqc = false
    skip_preseq = false
    skip_dupradar = false
    skip_qualimap = false
    skip_rseqc = false
    skip_edger = false
    skip_multiqc = false
  // misc
    outdir = './results'
    seqdir = false
    metadir = false
    name = false
    multiqc_config = "$baseDir/assets/multiqc_config.yaml"
    clusterOptions = false
    email = false
    email_on_fail = false
    max_multiqc_email_size = 25.MB
    plaintext_email = true
    monochrome_logs = false
    help = false
    tracedir = "${params.outdir}/pipeline_info"
    awsqueue = false
    awsregion = 'eu-west-1'
    hostnames = false
    config_profile_description = false
    config_profile_contact = false
    config_profile_url = false
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 50.GB
  max_cpus = 8
  max_time = 90.h
}

process {
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true }
}

// Avoid this error:
// WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
// Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351, once this is established and works well, nextflow might implement this behavior as new default.
docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'rnaseq'
  author = 'orionzhou'
  homePage = 'https://github.com/orionzhou/nf'
  description = 'Nextflow RNA-Seq analysis pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '0.9.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
