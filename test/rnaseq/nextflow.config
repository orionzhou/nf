launchDir = "/datalus/weiyu/rnaseq_test"
workDir = "$NXF_CACHE/work/rnaseq/"

includeConfig "$NXF_HOME/configs/nextflow.config"
includeConfig "$NXF_HOME/configs/fastq.config"
includeConfig "$NXF_HOME/configs/rnaseq.config"

params {
  genome = 'Zmays_B73v5'
  name = 'rnaseq_test'
  // sample information including sequence locations
  design = 'design.tsv'
  source = 'local'
  read_type = 'illumina'
  // paired-end or single-end: "SE", "PE" or "mixed"
  paired = 'SE'
  // strand-specific RNA-Seq? :"no", "forward" or "reverse"
  stranded = 'no'
  interleaved = false
  
  // output locations
  outdir = "./raw"
  tracedir = "./pipeline_info"
  save_fastq = false
  
  // read trimming: "trim_galore" or "no"
  trimmer = "trim_galore"
  // save trimmed fastq?
  save_trimmed = false

  // "hisat2" and "star"
  aligner = "star"
  // save final alignment BAM?
  saveBAM = false
  
  // run Preseq QC tool (slow)?
  skip_preseq = true
  // run GATK MarkDuplication? 
  skip_markdup = true
  // run SALMON quantification?
  run_salmon = false
  // run StringTie quantification?
  run_stringtie = false
  // count multi-mapping reads?
  count_multi = false
  // extra allele-specific analysis (optional)
  ase = false
  // extra recombinant-inbred line genotyping analysis (optional)
  ril = false
  // extra CAGE tag counting
  cage = false
  
  // send email?
  email = false
  email_on_fail = "123@gmail.com"
}

executor {
  $sge {
    queueSize = 50
    pollInterval = '10sec'
    jobName = { "${task.process.replaceAll(':','_')}.${task.tag}" }
  }

  $local {
    queueSize = 10
    memory = 500.GB
  }
}

process {
  executor = 'sge'
  clusterOptions = { "-l h_vmem=${task.memory.toString().replaceAll(/[\sB]/,'')} -S /bin/bash"  }
  penv = 'smp'
  queue = 'hp.q'

  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
  time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 5.GB * (task.attempt - 1), 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    //time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
    //memory = { check_max( 10.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 3.h + 5.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_long {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 20.h * task.attempt, 'time' ) }
  }
  withLabel:low_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 10.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:mid_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:high_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 40.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
}

def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
