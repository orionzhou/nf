params {
  // Workflow flags:

  // Mandatory arguments
  input = 'input.tsv'
  step = 'mapping' // Starts with mapping

  // Genome and references options
  genome = 'Zmays_B73'
  igenomes_ignore = true

  // Main options
  help = false
  no_intervals = null // Intervals will be built from the fasta file
  nucleotides_per_second = 1000.0 // Default interval size
  sentieon = null // Not using Sentieon by default
  skip_qc = null // All QC tools are used
  target_bed = false // No default TargetBED file for targeted sequencing
  tools = null // No default Variant_Calling or Annotation tools

  // Modify fastqs (trim/split)
  trim_fastq = true // No trimming
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  trim_nextseq = 0
  save_trimmed = false
  split_fastq = null // Fastq files will not be split by default

  // Preprocessing
  aligner = 'bwa-mem'
  markdup_java_options = '"-Xms4000m -Xmx7g"' // Established values for markDuplicates memory consumption, see https://github.com/SciLifeLab/Sarek/pull/689 for details
  use_gatk_spark = false // GATK Spark implementation of their tools in local mode not used by default
  save_bam_mapped = null // Mapped BAMs not saved
  skip_markduplicates = null // Do not skip markDuplicates by default

  // Variant Calling
  ascat_ploidy = null // Use default value
  ascat_purity = null // Use default value
  cf_coeff = "0.05"  // default value for Control-FREEC
  cf_ploidy = "2"     // you can use 2,3,4
  cf_window = null      // by default we are not using this in Control-FREEC
  generate_gvcf = null // g.vcf are not produced by HaplotypeCaller by default
  no_strelka_bp = null // Strelka will use Manta candidateSmallIndels if available
  pon = false // No default PON (Panel of Normals) file for GATK Mutect2 / Sentieon TNscope
  pon_index = false // No default PON index for GATK Mutect2 / Sentieon TNscope
  ignore_soft_clipped_bases = null // no --dont-use-soft-clipped-bases for GATK Mutect2
  umi = null // no umi
  read_structure1 = null // no umi
  read_structure2 = null // no umi

  // Annotation
  annotate_tools = null // Only with --step annotate
  annotation_cache = null // Annotation cache disabled
  cadd_cache = null // CADD cache disabled
  cadd_indels = false // No CADD InDels file
  cadd_indels_tbi = false // No CADD InDels index
  cadd_wg_snvs = false // No CADD SNVs file
  cadd_wg_snvs_tbi = false // No CADD SNVs index
  genesplicer = null // genesplicer disabled within VEP
  snpeff_cache = null // No directory for snpEff cache
  vep_cache = null // No directory for VEP cache

  // Custom config
  config_profile_contact = false
  config_profile_description = false
  config_profile_url = false
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"

  // Other options
  outdir = './results'
  publish_dir_mode = 'copy' // Default PublishDirMode (same as other nf-core pipelines)
  sequencing_center = null // No sequencing center to be written in BAM header in MapReads process
  multiqc_config = false
  monochrome_logs = false // Monochrome logs disabled
  email = false // No default email
  email_on_fail = 'pzhou@genetics.ac.cn'
  plaintext_email = false // Plaintext email disabled
  max_multiqc_email_size = 25.MB

  hostnames = false
  name = false // No default name
  tracedir = "./pipeline_info"
}

includeConfig "$nf/configs/nextflow.config"
includeConfig "$nf/configs/base/sarek.config"

dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

// Return the minimum between requirements and a maximum limit to ensure that resource requirements don't go over
def check_resource(obj) {
    try {
      if (obj.getClass() == nextflow.util.MemoryUnit && obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else if (obj.getClass() == nextflow.util.Duration && obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else if (obj.getClass() == java.lang.Integer)
        return Math.min(obj, params.max_cpus as int)
      else
        return obj
    } catch (all) {
        println "   ### ERROR ###   Max params max_memory:'${params.max_memory}', max_time:'${params.max_time}' or max_cpus:'${params.max_cpus}'  is not valid! Using default value: $obj"
    }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
