launchDir = "$proj/barn/methylseq/{{ yid }}"
workDir = "$NXF_CACHE/work/mythlyseq/{{ yid }}"

includeConfig "$nf/configs/nextflow.config"
includeConfig "$nf/configs/fastq.config"
includeConfig "$nf/configs/methylseq.config"

params {
  genome = '{{ genome }}'
  name = '{{ yid }}'
  design = '{{ design }}'
  source = '{{ source }}'
  single_end = {{ single_end }}
  interleaved = {{ interleaved }}
  outdir = "./raw"
  save_fastq = {{ save_fastq }}
  save_trimmed = {{ save_trimmed }}
  aligner = {{ aligner }}
  saveBAM = {{ saveBAM }}
  skip_preseq = {{ skip_preseq }}
  relax_mismatches = true
}

process {
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}