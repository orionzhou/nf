env.TMPDIR = "$NXF_TEMP"

executor {
  $local {
    queueSize = 10
  }
}

singularity {
  enabled = false
  autoMounts = true
  cacheDir = "$NXF_CACHE/singularity"
  runOptions = "-B $NXF_TEMP"
}

conda {
  enabled = true
}

params {
  max_memory = 500.GB
  max_cpus = 50
  max_time = 240.h
}

process {
  executor = 'local'

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'
  queue = 'amdsmall'

  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
  time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 5.GB * (task.attempt - 1), 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    //time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
    //memory = { check_max( 10.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 3.h + 5.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_long {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 20.h * task.attempt, 'time' ) }
  }
  withLabel:low_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 10.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:mid_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:high_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 40.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
}


