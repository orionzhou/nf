env.TMPDIR = '/scratch.global/zhoux379/nf/tmp/'

params {
  config_profile_description = 'Minnesota Supercomputing Institute HPC cluster profile'
  config_profile_contact = 'Peng Zhou (@orionzhou)'
  config_profile_url = 'https://github.com/orionzhou/nf'

  max_memory = 250.GB
  max_cpus = 128
  max_time = 96.h
}

singularity {
  enabled = true
  autoMounts = true
  cacheDir = '/scratch.global/zhoux379/nf/singularity'
  runOptions = '-B /scratch.global/zhoux379/nf/tmp/'
}

conda {
  enabled = false
  cacheDir = '/scratch.global/zhoux379/nf/conda'
}

executor {
  $pbs {
      queueSize = 100
      pollInterval = '30sec'
  }

  $local {
      cpus = 1
      memory = 30.GB
  }
}

process {
  beforeScript = 'module load singularity'
  executor = 'pbs'

  queue = 'amdsmall'
  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
  time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 5.GB * (task.attempt - 1), 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    //time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
    //memory = { check_max( 10.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 3.h + 5.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_long {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 20.h * task.attempt, 'time' ) }
  }
  withLabel:low_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 10.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:mid_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:high_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 40.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }

  withName:get_software_versions { executor = 'local' }
}


