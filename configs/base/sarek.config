process.conda = "$NXF_CONDA_CACHEDIR/nf-core-sarek-2.7"

params {
  qcdir = "$proj/reseq/data/11_qc"
  s3dir = "$proj/s3/zhoup-multiqc"
}

process {
  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxErrors = '-1'
  maxRetries = 2

  // Process-specific resource requirements
  // See https://www.nextflow.io/docs/latest/config.html#config-process-selectors

  withLabel:process_low {
    cpus = { check_resource(1)}
    memory = { check_resource( 10.GB + 5.GB * task.attempt) }
    time = { check_resource( 1.h + 5.h * task.attempt) }
  }
  withLabel:process_medium {
    cpus = { check_resource(4)}
    memory = { check_resource( 30.GB + 5.GB * task.attempt) }
    time = { check_resource( 10.h + 5.h * task.attempt) }
  }
  withLabel:process_high {
    cpus = { check_resource(8)}
    memory = { check_resource( 50.GB + 5.GB * task.attempt) }
    time = { check_resource( 15.h + 5.h * task.attempt) }
  }
  withLabel:process_long {
    time = { check_resource( 40.h + 10.h * task.attempt) }
  }

  withLabel:cpus_1 {
    cpus = {check_resource(1)}
  }
  withLabel:cpus_2 {
    cpus = {check_resource(2)}
  }
  withLabel:cpus_4 {
    cpus = {check_resource(4)}
  }
  withLabel:cpus_8 {
    cpus = {check_resource(8)}
  }
  withLabel:cpus_16 {
    cpus = {check_resource(12)}
  }
  withLabel:cpus_max {
    cpus = {check_resource(12)}
  }

  withLabel:memory_singleCPU_2_task {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * 2 * task.attempt)}
  }
  withLabel:memory_singleCPU_task_sq {
    memory = {check_resource((params.single_cpu_mem as nextflow.util.MemoryUnit) * task.attempt * task.attempt)}
  }
  withLabel:memory_max {
    memory = { check_resource(40.GB + 10.GB * task.attempt) }
  }

  withName:get_software_versions {
  	executor = 'local'
    cache = false
  }
  withName:Output_documentation { executor = 'local' }

  withLabel:concat_vcf {
    // For unknown reasons, ConcatVCF sometimes fails with SIGPIPE
    // (exit code 141). Rerunning the process will usually work.
    errorStrategy = {task.exitStatus == 141 ? 'retry' : 'terminate'}
  }
  withLabel:FastQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:MapReads {
    memory = {check_resource(60.GB * task.attempt)}
    time = {check_resource(48.h * task.attempt)}
  }
  withName:MultiQC {
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:Snpeff {
    container = {(params.annotation_cache && params.snpeff_cache) ? 'nfcore/sarek:2.7' : "nfcore/sareksnpeff:2.7.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withLabel:VEP {
    container = {(params.annotation_cache && params.vep_cache) ? 'nfcore/sarek:2.7' : "nfcore/sarekvep:2.7.${params.genome}"}
    errorStrategy = {task.exitStatus == 143 ? 'retry' : 'ignore'}
  }
  withName:HaplotypeCaller {
    cpus = { check_resource(1)}
    memory = { check_resource( 30.GB + 5.GB * task.attempt) }
    time = { check_resource( 35.h + 5.h * task.attempt) }
  }
}
