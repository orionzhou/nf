process.conda = "$NXF_CONDA_CACHEDIR/nf-core-methylseq-1.5"

process {
  errorStrategy = { task.exitStatus in [1,143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 2
  maxErrors = '-1'

  // Resource requirements
  withName:makeBismarkIndex {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 36.h * task.attempt, 'time') }
  }
  withName:trim_galore {
    cpus = { check_max( 15 * task.attempt, 'cpus') }
    memory = { check_max( 6.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:bismark_align {
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 8.d * task.attempt, 'time') }
  }
  withName:bismark_deduplicate {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  withName:bismark_methXtract {
    cpus = { check_max( 12 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:qualimap {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 6.h * task.attempt, 'time') }
  }
  withName:preseq {
    errorStrategy = 'ignore'
  }
  withName:get_software_versions {
  	executor = 'local'
    validExitStatus = [0,1]
    cache = false
  }
  withName:output_documentation { executor = 'local' }
  withName:bwamem_align {
    cpus = { check_max( 8 * task.attempt, 'cpus') }
    memory = { check_max( 64.GB * task.attempt, 'memory') }
    time = { check_max( 6.d * task.attempt, 'time') }
  }
  withName:samtools_sort_index_flagstat {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
  withName:markDuplicates {
    cpus = { check_max( 4 * task.attempt, 'cpus') }
    memory = { check_max( 32.GB * task.attempt, 'memory') }
    time = { check_max( 2.d * task.attempt, 'time') }
  }
  withName:methyldackel {
    cpus = { check_max( 6 * task.attempt, 'cpus') }
    memory = { check_max( 48.GB * task.attempt, 'memory') }
    time = { check_max( 1.d * task.attempt, 'time') }
  }
}

