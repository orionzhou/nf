cleanup = true

profiles {
  msi {includeConfig "hpc/msi.config"}
  mesabi {includeConfig "hpc/msi_mesabi.config"}
  mangi {includeConfig "hpc/msi_mangi.config"}
  caas {includeConfig "hpc/caas.config"}
  conda       { params.enable_conda = true }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
    cacheDir = "$NXF_CACHE/singularity"
    runOptions = "-B $NXF_TEMP"
  }
}

params {
  max_memory = 250.GB
  max_cpus = 128
  max_time = 96.h
}

process {
  cpus = { check_max( 1, 'cpus' ) }
  memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
  time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
  maxRetries = 1
  maxErrors = '-1'

  withLabel:error_ignore {
    errorStrategy = 'ignore'
  }
  withLabel:error_retry {
    errorStrategy = 'retry'
    maxRetries = 2
  }

  // Process-specific resource requirements
  withLabel:process_low {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 5.GB * (task.attempt - 1), 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_medium {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    //time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
    //memory = { check_max( 10.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 3.h + 5.h * task.attempt, 'time' ) }
  }
  withLabel:process_high {
    cpus = { check_max( 6, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 5.h + 10.h * (task.attempt - 1), 'time' ) }
  }
  withLabel:process_long {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 5.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 10.h + 20.h * task.attempt, 'time' ) }
  }
  withLabel:low_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 10.GB + 5.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:mid_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 20.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
  withLabel:high_memory {
    cpus = { check_max( 1, 'cpus' ) }
    memory = { check_max( 40.GB + 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 15.h + 10.h * task.attempt, 'time' ) }
  }
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
