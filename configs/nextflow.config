env {
  NXF_EXECUTOR = 'qsub'
  NXF_OPTS = '-Xms1g -Xmx10g'
}
cleanup = true

params {
  metadir = "$proj/barn/data/15_readlist"
  seqdir = '$NXF_CACHE/barn/data/fastq'
  email = false
  email_on_fail = 'zhoux379@umn.edu'
  cleanup = false
}

// includeConfig "genome.config"

profiles {
  mesabi {includeConfig "msi_mesabi.config"}
  mangi {includeConfig "msi_mangi.config"}
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}