params {
  lib = 'chipseq'
  single_end = false
  // References
    genome = false
    save_reference = false
    gencode = false
    compressedReference = false
  // Trimming
    save_fastq = false
    clip_r1 = 0
    clip_r2 = 0
    three_prime_clip_r1 = 0
    three_prime_clip_r2 = 0
    trim_nextseq = 0
    skip_trimming = false
    save_trimmed = false
  // Alignments
    aligner = 'bwa'
    saveBAM = false
    fragment_size = 200
    keep_dups = false
    keep_multi_map = false
    seq_center = false
    markdup_java_options = '"-Xms4000m -Xmx7g"' //Established values for markDuplicate memory consumption, see issue PR #689 (in Sarek) for details
    hisat_build_memory = 200 // Required amount of memory in GB to build HISAT2 index with splice sites
  // Peak calling
    min_mapped_reads = 100000
    fingerprint_bins = 500000
    narrow_peak = false
    broad_cutoff = 0.1
    //broad_cutoff = 0.00001
    min_reps_consensus = 1
    save_macs_pileup = false
    skip_diff_analysis = false
  // QC
    skip_qc = false
    skip_fastqc = false
    skip_picard_metrics = false
    skip_preseq = false
    skip_meta_plot = false
    skip_plot_fingerprint = false
    skip_spp = false
    skip_igv = false
    skip_multiqc = false
  // configs
    multiqc_config = "$baseDir/assets/multiqc/multiqc_config.yaml"
    bamtools_filter_pe_config = "$baseDir/assets/bamtools_filter_pe.json"
    bamtools_filter_se_config = "$baseDir/assets/bamtools_filter_se.json"
  // other
    outdir = './results'
    monochrome_logs = false
    help = false
    hostnames = false
    max_multiqc_email_size = 25.MB
    tracedir = "${params.outdir}/pipeline_info"
    config_profile_description = false
    config_profile_contact = false
    config_profile_url = false
    plaintext_email = false
    email = false
    email_on_fail = false
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 50.GB
  max_cpus = 8
  max_time = 90.h
}

process {
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true }
}

docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'chipseq'
  author = 'orionzhou'
  homePage = 'https://github.com/orionzhou/nf/chipseq'
  description = 'Nextflow ChIP-seq/DAP-seq pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '0.1.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
