params {
  name = false
  stranded = false
  project = false

  // Workflow flags
  clip_r1 = 0
  clip_r2 = 0
  three_prime_clip_r1 = 0
  three_prime_clip_r2 = 0
  rrbs = false
  pbat = false
  aligner = 'bismark'
  single_cell = false
  epignome = false
  accel = false
  zymo = false
  cegx = false
  comprehensive = false
  cytosine_report = false
  ignore_flags = false
  meth_cutoff = false
  methyl_kit = false
  min_depth = 0
  skip_deduplication = false
  non_directional = false
  skip_trimming = false
  save_align_intermeds = false
  known_splices = false
  slamseq = false
  local_alignment = false
  save_reference = false
  save_trimmed = false
  unmapped = false
  relax_mismatches = false
  num_mismatches = 0.6
  // 0.6 will allow a penalty of bp * -0.6
  // For 100bp reads, this is -60. Mismatches cost -6, gap opening -5 and gap extension -2
  // So -60 would allow 10 mismatches or ~ 8 x 1-2bp indels
  // Bismark default is 0.2 (L,0,-0.2), Bowtie2 default is 0.6 (L,0,-0.6)
  bismark_align_cpu_per_multicore = null
  bismark_align_mem_per_multicore = null

  // misc
  outdir = './results'
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false
  email = false
  email_on_fail = false

  multiqc_config = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
}

params {
  // Defaults only, expecting to be overwritten
  max_memory = 50.GB
  max_cpus = 8
  max_time = 90.h
}

process {
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 8.GB * task.attempt, 'memory' ) }
  time = { check_max( 4.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 1
  maxErrors = '-1'
}

profiles {
  awsbatch { includeConfig 'conf/awsbatch.config' }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker { docker.enabled = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true }
}

docker.runOptions = '-u \$(id -u):\$(id -g)'

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'methylseq'
  author = 'orionzhou'
  homePage = 'https://github.com/orionzhou/nf'
  description = 'Nextflow Methylation/Bisulfite Seq pipeline'
  mainScript = 'main.nf'
  nextflowVersion = '>=19.04.0'
  version = '0.0.1'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
