include '../modules/utils.nf'

def help() {
  log.info showHeader()
  log.info"""

  Usage:

  The typical command for running the pipeline is as follows:

  nextflow run nfc/methylseq -profile msi_mesabi

  Mandatory arguments:
    --aligner [str]                   Alignment tool to use (default: bismark)
                                          Available: bismark, bismark_hisat, bwameth
    -profile [str]                    Configuration profile to use. Can use multiple (comma separated)
                                          Available: conda, docker, singularity, test, awsbatch, <institute> and more

  Options:
   --comprehensive [bool]             Output information for all cytosine contexts
   --cytosine_report [bool]           Output stranded cytosine report during Bismark's bismark_methylation_extractor step.
   --ignore_flags [bool]              Run MethylDackel with the flag to ignore SAM flags.
   --meth_cutoff [int]                Specify a minimum read coverage to report a methylation call during Bismark's bismark_methylation_extractor step.
   --min_depth [int]                  Specify a minimum read coverage for MethylDackel to report a methylation call.
   --methyl_kit [bool]                Run MethylDackel with the --methyl_kit flag to produce files suitable for use with the methylKit R package.
   --skip_deduplication [bool]        Skip deduplication step after alignment. This is turned on automatically if --rrbs is specified
   --non_directional [bool]           Run alignment against all four possible strands
   --save_align_intermeds [bool]      Save aligned intermediates to results directory
   --save_trimmed [bool]              Save trimmed reads to results directory
   --unmapped [bool]                  Save unmapped reads to fastq files
   --relax_mismatches [bool]          Turn on to relax stringency for alignment (set allowed penalty with --num_mismatches)
   --num_mismatches [float]           0.6 will allow a penalty of bp * -0.6 - for 100bp reads (bismark default is 0.2)
   --known_splices [file]             Supply a .gtf file containing known splice sites (bismark_hisat only)
   --slamseq [bool]                   Run bismark in SLAM-seq mode
   --local_alignment [bool]           Allow soft-clipping of reads (potentially useful for single-cell experiments)
   --bismark_align_cpu_per_multicore [int] Specify how many CPUs are required per --multicore for bismark align (default = 3)
   --bismark_align_mem_per_multicore [str] Specify how much memory is required per --multicore for bismark align (default = 13.GB)

  References                          If not specified in the configuration file or you wish to overwrite any of the references.
    --fasta [file]                    Path to fasta reference
    --fasta_index [path]              Path to Fasta Index
    --bismark_index [path]            Path to Bismark index
    --bwa_meth_index [path]           Path to bwameth index
    --save_reference [bool]           Save reference(s) to results directory

  Trimming options:
   --skip_trimming [bool]             Skip read trimming
   --clip_r1 [int]                    Trim the specified number of bases from the 5' end of read 1 (or single-end reads).
   --clip_r2 [int]                    Trim the specified number of bases from the 5' end of read 2 (paired-end only).
   --three_prime_clip_r1 [int]        Trim the specified number of bases from the 3' end of read 1 AFTER adapter/quality trimming
   --three_prime_clip_r2 [int]        Trim the specified number of bases from the 3' end of read 2 AFTER adapter/quality trimming
   --rrbs [bool]                      Turn on if dealing with MspI digested material.

  Trimming presets:
   --pbat [bool]
   --single_cell [bool]
   --epignome [bool]
   --accell [bool]
   --zymo [bool]
   --cegx [bool]

  Other options:
   --outdir [file]                    The output directory where the results will be saved
   --email [email]                    Set this parameter to your e-mail address to get a summary e-mail with details of the run sent to you when the workflow exits
   --email_on_fail [email]            Same as --email, except only send mail if the workflow is not successful
   --max_multiqc_email_size [str]     Threshold size for MultiQC report to be attached in notification email. If file generated by pipeline exceeds the threshold, it will not be attached (Default: 25MB)
   -name [str]                        Name for the pipeline run. If not specified, Nextflow will automatically generate a random mnemonic

  AWSBatch options:
    --awsqueue [str]                  The AWSBatch JobQueue that needs to be set when running on AWSBatch
    --awsregion [str]                 The AWS Region for your AWS Batch job to run on
    --awscli [str]                    Path to the AWS CLI tool

  """.stripIndent()
}

def prep_params(params, workflow) {
  if (!params.design) exit 1, "no design / meta file specified"
  if (!params.name) params.name = workflow.runName
  prep_params_genome(params)
  // Trimming presets
    clip_r1 = params.clip_r1
    clip_r2 = params.clip_r2
    three_prime_clip_r1 = params.three_prime_clip_r1
    three_prime_clip_r2 = params.three_prime_clip_r2
    if(params.pbat){
      clip_r1 = 9
      clip_r2 = 9
      three_prime_clip_r1 = 9
      three_prime_clip_r2 = 9
    } else if( params.single_cell ){
      clip_r1 = 6
      clip_r2 = 6
      three_prime_clip_r1 = 6
      three_prime_clip_r2 = 6
    } else if( params.epignome ){
      clip_r1 = 8
      clip_r2 = 8
      three_prime_clip_r1 = 8
      three_prime_clip_r2 = 8
    } else if( params.accel || params.zymo ){
      clip_r1 = 10
      clip_r2 = 15
      three_prime_clip_r1 = 10
      three_prime_clip_r2 = 10
    } else if( params.cegx ){
      clip_r1 = 6
      clip_r2 = 6
      three_prime_clip_r1 = 2
      three_prime_clip_r2 = 2
    }
  // aligner
  assert params.aligner == 'bwameth' || params.aligner == 'bismark' || params.aligner == 'bismark_hisat' : "Invalid aligner option: ${params.aligner}. Valid options: 'bismark', 'bwameth', 'bismark_hisat'"
}

def getSummary() {
  def summary = [:]
  if (workflow.revision) summary['Pipeline Release'] = workflow.revision
  summary['Run Name'] = params.name ?: workflow.runName
  summary['Design'] = params.design
  summary['Strandedness'] = params.stranded
  summary['Remove rRNA'] = params.removeRiboRNA
  if (params.pico) summary['Library Prep'] = "SMARTer Stranded Total RNA-Seq Kit - Pico Input"
  summary['Trimming'] = "5'R1: $params.clip_r1 / 5'R2: $params.clip_r2 / 3'R1: $params.three_prime_clip_r1 / 3'R2: $params.three_prime_clip_r2 / NextSeq Trim: $params.trim_nextseq"
  if (params.genome) summary['Genome'] = params.genome
  summary['Aligner'] = params.aligner
  summary['Pseudo Aligner'] = params.pseudo_aligner
  // if (params.gtf) summary['GTF Annotation'] = params.gtf
  // if (params.gff) summary['GFF3 Annotation'] = params.gff
  // if (params.bed12) summary['BED Annotation'] = params.bed12
  if (params.gencode) summary['GENCODE'] = params.gencode
  if (params.stringTieIgnoreGTF) summary['StringTie Ignore GTF'] = params.stringTieIgnoreGTF
  // if (params.fc_group_features_type) summary['Biotype GTF field'] = params.biotype
  summary['Save prefs'] = "Ref Genome: "+(params.saveReference ? 'T' : 'F')+" / Trimmed FastQ: "+(params.saveTrimmed ? 'T' : 'F')+" / Intermediate BAM: "+(params.saveAlignedIntermediates ? 'T' : 'F')
  summary['Max Resources'] = "$params.max_memory memory, $params.max_cpus cpus, $params.max_time time per job"
  if (workflow.containerEngine) summary['Container'] = "$workflow.containerEngine - $workflow.container"
  summary['Output dir'] = params.outdir
  summary['Launch dir'] = workflow.launchDir
  summary['Working dir'] = workflow.workDir
  summary['Script dir'] = workflow.projectDir
  summary['User'] = workflow.userName
  if (workflow.profile == 'awsbatch') {
    summary['AWS Region']     = params.awsregion
    summary['AWS Queue']      = params.awsqueue
  }
  summary['Config Profile'] = workflow.profile
  if (params.config_profile_description) summary['Config Description'] = params.config_profile_description
  if (params.config_profile_contact)     summary['Config Contact']     = params.config_profile_contact
  if (params.config_profile_url)         summary['Config URL']         = params.config_profile_url
  if (params.email || params.email_on_fail) {
    summary['E-mail Address']    = params.email
    summary['E-mail on failure'] = params.email_on_fail
    summary['MultiQC maxsize']   = params.max_multiqc_email_size
  }
  return summary
}

def get_reads(design) {
  reads_se = design
    .splitCsv(header:true, sep:"\t")
    .filter { it.paired != 'TRUE' }
    .map { row -> [ row.SampleID, false, [
      file("${params.seqdir}/${params.name}/${row.SampleID}_R0.fq.gz", checkIfExists:true)
      ] ] }
  reads_pe = design
    .splitCsv(header:true, sep:"\t")
    .filter { it.paired == 'TRUE' }
    .map { row -> [ row.SampleID, true, [
      file("${params.seqdir}/${params.name}/${row.SampleID}_R1.fq.gz", checkIfExists:true),
      file("${params.seqdir}/${params.name}/${row.SampleID}_R2.fq.gz", checkIfExists:true)
      ] ] }
  return reads_se.concat(reads_pe)
}

def get_read_num(design) {
  ch_read_num = design
    .splitCsv(header:true, sep:"\t")
    .map { row -> [ row.SampleID, row.spots.toInteger() ] }
  return ch_read_num
}


